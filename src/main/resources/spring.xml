<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 


    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.3.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    <!--读取db.properties -->
    <!--<context:property-placeholder location="classpath:properties/db.properties"/>-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:properties/*.properties</value>
            </list>
        </property>
    </bean>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <!--数据库驱动 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!--连接数据库的url -->
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <!--连接数据库的用户名 -->
        <property name="username" value="${jdbc.username}"/>
        <!--连接数据库的密码 -->
        <property name="password" value="${jdbc.password}"/>
        <!--最大连接数 -->
        <property name="maximumPoolSize" value="${jdbc.maxTotal}"/>
        <!--最大空闲连接  -->
        <property name="minimumIdle" value="${jdbc.initialSize}"/>
    </bean>
    <!-- 事务管理器 -->
    <bean id="transactionManager" class=
            "org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置扫描@Service注解 -->
    <context:component-scan base-package="com.kanjia.service"/>

    <!--配置其他需要扫描的包,扫basic是因为需要找swaggerconfig,扫controller是为了将controller放到swagger中-->

    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="generate*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS"
                       read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS"
                       read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS"
                       read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 切面 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* com.kanjia.service.*.*(..))"/>
    </aop:config>
    <!-- 配置 MyBatis的工厂 -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBatis的核心配置文件所在位置 -->
        <property name="configLocation"
                  value="classpath:mybatis-config.xml"/>
        <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
        <property name="mapperLocations" value="classpath*:com/kanjia/mapper/impl/*.xml"/>
    </bean>
    <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.kanjia.mapper"/>
    </bean>

</beans>
